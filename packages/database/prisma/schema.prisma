// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  githubId  String   @unique
  name      String
  email     String   @unique
  avatarUrl String

  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AuditLog    AuditLog[]
  TeamMembers TeamMember[]
  OwnedTeams  Team[]     @relation("UserOwnedTeams")
  DeviceKeys  DeviceKey[]
  CodeShares  CodeShare[]
  TeamInvitations TeamInvitation[]
  @@index([id, githubId, email])
}


model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  metadata  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User        User     @relation(fields: [userId], references: [id])
}

enum TeamRole {
  OWNER
  MEMBER
}

model Team {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Owner        User         @relation("UserOwnedTeams", fields: [ownerId], references: [id])
  Members      TeamMember[]
  Invitations  TeamInvitation[]

  @@index([slug])
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Team  Team @relation(fields: [teamId], references: [id])
  User  User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([userId, teamId])
}

// Device public keys per user device (for E2EE)
model DeviceKey {
  id                     String   @id @default(cuid())
  userId                 String
  deviceId               String
  encryptionPublicKeyJwk Json
  signingPublicKeyJwk    Json?
  algorithm              String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@unique([userId, deviceId], name: "userId_deviceId")
  @@index([userId])
}

// Ciphertext-only code share entries (server cannot decrypt)
model CodeShare {
  id              String   @id @default(cuid())
  authorId        String
  ciphertextB64u  String
  ivB64u          String
  aad             String?
  wrappedKeys     Json
  metadata        Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Author User @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@index([createdAt])
}

// Team invitation tokens
model TeamInvitation {
  id         String   @id @default(cuid())
  teamId     String
  inviterId  String
  token      String   @unique
  email      String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  acceptedAt DateTime?

  Team    Team @relation(fields: [teamId], references: [id])
  Inviter User @relation(fields: [inviterId], references: [id])

  @@index([teamId])
  @@index([inviterId])
}
